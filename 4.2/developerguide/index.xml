<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Developer Guide on WebLogic Kubernetes Operator</title>
    <link>https://oracle.github.io/weblogic-kubernetes-operator/4.2/developerguide/</link>
    <description>Recent content in Developer Guide on WebLogic Kubernetes Operator</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 Mar 2019 07:13:22 -0400</lastBuildDate>
    <atom:link href="https://oracle.github.io/weblogic-kubernetes-operator/4.2/developerguide/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Contribute to the operator</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/4.2/developerguide/contributing/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:19 -0500</pubDate>
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/4.2/developerguide/contributing/</guid>
      <description>Oracle welcomes contributions to this project from anyone. Contributions may be reporting an issue with the operator or submitting a pull request. Before embarking on significant development that may result in a large pull request, it is recommended that you create an issue and discuss the proposed changes with the existing developers first.&#xA;If you want to submit a pull request to fix a bug or enhance an existing feature, please first open an issue and link to that issue when you submit your pull request.</description>
    </item>
    <item>
      <title>Requirements</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/4.2/developerguide/requirements/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:19 -0500</pubDate>
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/4.2/developerguide/requirements/</guid>
      <description>In addition to the requirements listed here, the following software is also required to obtain and build the operator:&#xA;Git (1.8 or later recommended) Java Developer Kit (11 required, 11.0.2 recommended) Apache Maven (3.5.3 min, 3.6 recommended) The operator is written primarily in Java, BASH shell scripts, and WLST scripts.&#xA;Because the target runtime environment for the operator is Oracle Linux, no particular effort has been made to ensure the build or tests run on any other operating system.</description>
    </item>
    <item>
      <title>Building</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/4.2/developerguide/building/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/4.2/developerguide/building/</guid>
      <description>The operator is built using Apache Maven. The build machine will also need to have Docker installed.&#xA;To build the operator, issue the following command in the project directory:&#xA;$ mvn clean install This will compile the source files, build JAR files containing the compiled classes and libraries needed to run the operator, and will also execute all of the unit tests.&#xA;Contributions must conform to coding and formatting standards.</description>
    </item>
    <item>
      <title>Integration tests</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/4.2/developerguide/integration-tests/</link>
      <pubDate>Sat, 23 Feb 2019 17:23:22 -0500</pubDate>
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/4.2/developerguide/integration-tests/</guid>
      <description>The project includes integration tests that can be run against a Kubernetes cluster. If you want to use these tests, you will need to provide your own Kubernetes cluster. The Kubernetes cluster must meet the version number requirements and have Helm installed. Ensure that the operator image is in a container registry visible to the Kubernetes cluster.&#xA;You will need to obtain the kube.config file for an administrative user and make it available on the machine running the build.</description>
    </item>
    <item>
      <title>Branching</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/4.2/developerguide/branching/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:29 -0500</pubDate>
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/4.2/developerguide/branching/</guid>
      <description>The main branch is protected and contains source for the latest completed features and bug fixes. While this branch contains active work, we expect to keep it always &amp;ldquo;ready to release.&amp;rdquo; Therefore, longer running feature work will be performed on specific branches, such as feature/dynamic-clusters.&#xA;Because we want to balance separating destabilizing work into feature branches against the possibility of later difficult merges, we encourage developers working on features to pull out any necessary refactoring or improvements that are general purpose into their own shorter-lived branches and create pull requests to main when these smaller work items are completed.</description>
    </item>
    <item>
      <title>Coding standards</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/4.2/developerguide/coding-standards/</link>
      <pubDate>Sat, 23 Feb 2019 17:24:10 -0500</pubDate>
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/4.2/developerguide/coding-standards/</guid>
      <description>This project has adopted the following coding standards:&#xA;Code should be formatted using Oracle / WebLogic standards, which are identical to the Google Java Style. Javadoc must be provided for all public packages, classes, and methods, and must include all parameters and returns. Javadoc is not required for methods that override or implement methods that are already documented. All non-trivial methods should include LOGGER.entering() and LOGGER.exiting() calls. The LOGGER.exiting() call should include the value that is going to be returned from the method, unless that value includes a credential or other sensitive information.</description>
    </item>
    <item>
      <title>Code structure</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/4.2/developerguide/code-structure/</link>
      <pubDate>Sat, 23 Feb 2019 17:25:04 -0500</pubDate>
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/4.2/developerguide/code-structure/</guid>
      <description>This project has the following directory structure:&#xA;documentation/latest: This documentation documentation/&amp;lt;numbered directory&amp;gt;: The archived documentation for a previous release documentation/swagger: The operator REST API swagger documentation/domains: Reference for Domain and Cluster resource schemas json-schema-generator: Java model to JSON schema generator json-schema-maven-plugin: Maven plugin for schema generator kubernetes/charts: Helm charts kubernetes/samples: All samples, including for WebLogic domain creation integration-tests: JUnit 5 integration test suite operator: Operator runtime swagger-generator: Swagger file generator for the Kubernetes API server and Domain type Watch package The Watch API in the Kubernetes Java client provides a watch capability across a specific list of resources for a limited amount of time.</description>
    </item>
    <item>
      <title>Asynchronous call model</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/4.2/developerguide/asynchronous-call-model/</link>
      <pubDate>Sat, 23 Feb 2019 17:20:00 -0500</pubDate>
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/4.2/developerguide/asynchronous-call-model/</guid>
      <description>Our expectation is that customers will task the operator with managing hundreds of WebLogic domains across dozens of Kubernetes Namespaces. Therefore, we have designed the operator with an efficient user-level threads pattern. We&amp;rsquo;ve used that pattern to implement an asynchronous call model for Kubernetes API requests. This call model has built-in support for timeouts, retries with exponential back-off, and lists that exceed the requested maximum size using the continuance functionality.</description>
    </item>
    <item>
      <title>Domain processing</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/4.2/developerguide/domain-processing/</link>
      <pubDate>Sat, 23 Feb 2019 17:20:20 -0500</pubDate>
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/4.2/developerguide/domain-processing/</guid>
      <description>When the operator starts, it lists all the existing Domains and then processes these Domains to create the necessary Kubernetes resources, such as Pods and Services, if they don&amp;rsquo;t already exist. This initialization also includes looking for any stranded resources that, while created by the operator, no longer correlate with a Domain.&#xA;After this, the operator starts watches for changes to Domains and any changes to other resources created by the operator.</description>
    </item>
    <item>
      <title>Documentation</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/4.2/developerguide/documentation/</link>
      <pubDate>Tue, 19 Mar 2019 07:13:22 -0400</pubDate>
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/4.2/developerguide/documentation/</guid>
      <description>This documentation is produced using Hugo. To make an update to the documentation, follow this process:&#xA;If you have not already done so, clone the repository.&#xA;$ git clone https://github.com/oracle/weblogic-kubernetes-operator Create a new branch.&#xA;$ git checkout -b your-branch Make your documentation updates by editing the source files in documentation/site/content. Make sure you check in the changes from the documentation/site/content area only; do not build the site and check in the static files.</description>
    </item>
    <item>
      <title>Backward compatibility</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/4.2/developerguide/backwards-compatibility/</link>
      <pubDate>Sat, 23 Feb 2019 17:26:09 -0500</pubDate>
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/4.2/developerguide/backwards-compatibility/</guid>
      <description>Starting with the 2.0.1 release, operator releases must be backward compatible with respect to the Domain schema, operator Helm chart input values, configuration overrides template, Kubernetes resources created by the operator Helm chart, Kubernetes resources created by the operator, and the operator REST interface. We will maintain compatibility for three releases, except in the case of a clearly communicated deprecated feature, which will be maintained for one release after a replacement is available.</description>
    </item>
  </channel>
</rss>
