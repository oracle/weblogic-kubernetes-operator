AKS can pull images from any container registry, but the easiest integration is to use Azure Container Registry (ACR).  In addition to simplicity, using ACR simplifies high availability and disaster recovery with features such as geo-replication. For more information, see [Geo-replication in Azure Container Registry](https://learn.microsoft.com/en-us/azure/container-registry/container-registry-geo-replication). In this section, we will create a new Azure Container Registry, connect it to our pre-existing AKS cluster and push the image built in the preceding section to it.  For complete details, see [Azure Container Registry documentation](https://learn.microsoft.com/en-us/azure/container-registry/).

Let's create an instance of ACR in the same resource group we used for AKS. We will use the environment variables used during the steps above.  For simplicity, we use the resource group name as the name of the ACR instance.

```shell
$ az acr create --resource-group $AKS_PERS_RESOURCE_GROUP --name $ACR_NAME --sku Basic --admin-enabled true
```

Closely examine the JSON output from this command. Save the value of the `loginServer` property aside. It will look something like the following.

```json
"loginServer": "contosoresourcegroup1610068510.azurecr.io",
```

Use this value to sign in to the ACR instance. Note that because you are signing in with the `az` CLI, you do not need a password because your identity is already conveyed by having done `az login` previously.

```shell
$ export LOGIN_SERVER=$(az acr show -n $ACR_NAME --resource-group $AKS_PERS_RESOURCE_GROUP --query "loginServer" -o tsv)
```
```shell
$ az acr login --name $LOGIN_SERVER
```

Successful output will include `Login Succeeded`.
