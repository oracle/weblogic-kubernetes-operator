{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "description": "Domain represents a WebLogic domain and how it will be realized in the Kubernetes cluster.",
  "type": "object",
  "definitions": {
    "AdminServer": {
      "description": "AdminServer represents the operator configuration for the Administration Server.",
      "type": "object",
      "properties": {
        "serverStartState": {
          "description": "The state in which the server is to be started. Use ADMIN if server should start in the admin state. Defaults to RUNNING.",
          "type": "string",
          "enum": [
            "RUNNING",
            "ADMIN"
          ]
        },
        "serverService": {
          "description": "Customization affecting ClusterIP Kubernetes services for WebLogic Server instances.",
          "$ref": "#/definitions/ServerService"
        },
        "serverPod": {
          "description": "Configuration affecting server pods.",
          "$ref": "#/definitions/ServerPod"
        },
        "serverStartPolicy": {
          "description": "The strategy for deciding whether to start a server. Legal values are ALWAYS, NEVER, or IF_NEEDED.",
          "type": "string",
          "enum": [
            "ALWAYS",
            "NEVER",
            "IF_NEEDED"
          ]
        },
        "adminService": {
          "description": "Configures which of the Administration Server\u0027s WebLogic admin channels should be exposed outside the Kubernetes cluster via a node port service.",
          "$ref": "#/definitions/AdminService"
        },
        "restartVersion": {
          "description": "If present, every time this value is updated the operator will restart the required servers.",
          "type": "string"
        }
      }
    },
    "AdminService": {
      "type": "object",
      "properties": {
        "channels": {
          "description": "Specifies which of the Administration Server\u0027s WebLogic channels should be exposed outside the Kubernetes cluster via a node port service, along with the node port for each channel. If not specified, the Administration Server\u0027s node port service will not be created.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Channel"
          }
        },
        "annotations": {
          "description": "Annotations to associate with the external channel service.",
          "$ref": "#/definitions/Map"
        },
        "labels": {
          "description": "Labels to associate with the external channel service.",
          "$ref": "#/definitions/Map"
        }
      }
    },
    "Channel": {
      "description": "Describes a single channel used by the Administration Server.",
      "type": "object",
      "properties": {
        "channelName": {
          "description": "Name of channel.\n\u0027default\u0027 refers to the Administration Server\u0027s default channel (configured via the ServerMBean\u0027s ListenPort) \n\u0027default-secure\u0027 refers to the Administration Server\u0027s default secure channel (configured via the ServerMBean\u0027s SSLMBean\u0027s ListenPort) \n\u0027default-admin\u0027 refers to the Administration Server\u0027s default administrative channel (configured via the DomainMBean\u0027s AdministrationPort) \nOtherwise, the name is the name of one of the Administration Server\u0027s network access points (configured via the ServerMBean\u0027s NetworkAccessMBeans).",
          "type": "string"
        },
        "nodePort": {
          "description": "Specifies the port number used to access the WebLogic channel outside of the Kubernetes cluster. If not specified, defaults to the port defined by the WebLogic channel.",
          "type": "number"
        }
      },
      "required": [
        "channelName"
      ]
    },
    "Cluster": {
      "description": "An element representing a cluster in the domain configuration.",
      "type": "object",
      "properties": {
        "serverStartState": {
          "description": "The state in which the server is to be started. Use ADMIN if server should start in the admin state. Defaults to RUNNING.",
          "type": "string",
          "enum": [
            "RUNNING",
            "ADMIN"
          ]
        },
        "serverService": {
          "description": "Customization affecting ClusterIP Kubernetes services for WebLogic Server instances.",
          "$ref": "#/definitions/ServerService"
        },
        "maxUnavailable": {
          "description": "The maximum number of cluster members that can be temporarily unavailable. Defaults to 1.",
          "type": "number",
          "minimum": 1
        },
        "replicas": {
          "description": "The number of cluster members to run.",
          "type": "number",
          "minimum": 0
        },
        "clusterName": {
          "description": "The name of this cluster. Required",
          "type": "string"
        },
        "serverPod": {
          "description": "Configuration affecting server pods.",
          "$ref": "#/definitions/ServerPod"
        },
        "clusterService": {
          "description": "Customization affecting ClusterIP Kubernetes services for the WebLogic cluster.",
          "$ref": "#/definitions/KubernetesResource"
        },
        "serverStartPolicy": {
          "description": "The strategy for deciding whether to start a server. Legal values are NEVER, or IF_NEEDED.",
          "type": "string",
          "enum": [
            "NEVER",
            "IF_NEEDED"
          ]
        },
        "restartVersion": {
          "description": "If present, every time this value is updated the operator will restart the required servers.",
          "type": "string"
        }
      },
      "required": [
        "clusterName"
      ]
    },
    "ClusterStatus": {
      "type": "object",
      "properties": {
        "minimumReplicas": {
          "description": "The minimum number of cluster members.",
          "type": "number",
          "minimum": 0
        },
        "maximumReplicas": {
          "description": "The maximum number of cluster members. Required.",
          "type": "number",
          "minimum": 0
        },
        "replicas": {
          "description": "The number of intended cluster members. Required.",
          "type": "number",
          "minimum": 0
        },
        "clusterName": {
          "description": "WebLogic cluster name. Required.",
          "type": "string"
        },
        "readyReplicas": {
          "description": "The number of ready cluster members. Required.",
          "type": "number",
          "minimum": 0
        },
        "replicasGoal": {
          "description": "The requested number of cluster members from the domain spec. Cluster members will be started by the operator if this value is larger than zero.",
          "type": "number",
          "minimum": 0
        }
      }
    },
    "Configuration": {
      "type": "object",
      "properties": {
        "opss": {
          "description": "Configuration for OPSS security.",
          "$ref": "#/definitions/Opss"
        },
        "model": {
          "description": "Model in image model files and properties.",
          "$ref": "#/definitions/Model"
        },
        "secrets": {
          "description": "A list of names of the secrets for WebLogic configuration overrides or model. If this field is specified it overrides the value of spec.configOverrideSecrets.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "overridesConfigMap": {
          "description": "The name of the config map for WebLogic configuration overrides. If this field is specified it overrides the value of spec.configOverrides.",
          "type": "string"
        },
        "introspectorJobActiveDeadlineSeconds": {
          "description": "The introspector job timeout value in seconds. If this field is specified it overrides the Operator\u0027s config map data.introspectorJobActiveDeadlineSeconds value.",
          "type": "number"
        }
      }
    },
    "DateTime": {
      "format": "date-time",
      "type": "string"
    },
    "DomainCondition": {
      "type": "object",
      "properties": {
        "reason": {
          "description": "Unique, one-word, CamelCase reason for the condition\u0027s last transition.",
          "type": "string"
        },
        "type": {
          "description": "The type of the condition. Valid types are Progressing, Available, and Failed. Required.",
          "type": "string",
          "enum": [
            "Progressing",
            "Available",
            "Failed"
          ]
        },
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/DateTime"
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "lastProbeTime": {
          "description": "Last time we probed the condition.",
          "$ref": "#/definitions/DateTime"
        },
        "status": {
          "description": "Status is the status of the condition. Can be True, False, Unknown. Required.",
          "type": "string"
        }
      }
    },
    "DomainSpec": {
      "description": "DomainSpec is a description of a domain.",
      "type": "object",
      "properties": {
        "configuration": {
          "description": "Models and overrides affecting the WebLogic domain configuration.",
          "$ref": "#/definitions/Configuration"
        },
        "configOverrideSecrets": {
          "deprecated": "true",
          "description": "Deprecated. Use configuration.secrets instead. Ignored if configuration.secrets is specified. A list of names of the secrets for optional WebLogic configuration overrides.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "imagePullSecrets": {
          "description": "A list of image pull secrets for the WebLogic Docker image.",
          "type": "array",
          "items": {
            "$ref": "https://github.com/garethr/kubernetes-json-schema/blob/master/v1.13.5/_definitions.json#/definitions/io.k8s.api.core.v1.LocalObjectReference"
          }
        },
        "domainUID": {
          "pattern": "^[a-z0-9-.]{1,253}$",
          "description": "Domain unique identifier. Must be unique across the Kubernetes cluster. Not required. Defaults to the value of metadata.name.",
          "type": "string"
        },
        "experimental": {
          "description": "Experimental feature configurations.",
          "$ref": "#/definitions/Experimental"
        },
        "serverService": {
          "description": "Customization affecting ClusterIP Kubernetes services for WebLogic Server instances.",
          "$ref": "#/definitions/ServerService"
        },
        "domainHome": {
          "description": "The folder for the WebLogic Domain. Not required. Defaults to /shared/domains/domains/\u003cdomainUID\u003e if domainHomeSourceType is PersistentVolume. Defaults to /u01/oracle/user_projects/domains/ if domainHomeSourceType is Image. Defaults to /u01/domains/\u003cdomainUID\u003e if domainHomeSourceType is FromModel.",
          "type": "string"
        },
        "domainHomeSourceType": {
          "description": "Domain home file system source type: Legal values: Image, PersistentVolume, FromModel. Image indicates that the domain home file system is contained in the Docker image specified by the image field. PersistentVolume indicates that the domain home file system is located on a persistent volume.  FromModel indicates that the domain home file system will be created and managed by the operator based on a WDT domain model. If this field is specified it overrides the value of domainHomeInImage. If both fields are unspecified then domainHomeSourceType defaults to Image.",
          "type": "string",
          "enum": [
            "Image",
            "PersistentVolume",
            "FromModel"
          ]
        },
        "httpAccessLogInLogHome": {
          "description": "If true (the default), then server HTTP access log files will be written to the same directory specified in `logHome`. Otherwise, server HTTP access log files will be written to the directory configured in the WebLogic domain home configuration.",
          "type": "boolean"
        },
        "webLogicCredentialsSecret": {
          "description": "The name of a pre-created Kubernetes secret, in the domain\u0027s namespace, that holds the username and password needed to boot WebLogic Server under the \u0027username\u0027 and \u0027password\u0027 fields.",
          "$ref": "https://github.com/garethr/kubernetes-json-schema/blob/master/v1.13.5/_definitions.json#/definitions/io.k8s.api.core.v1.SecretReference"
        },
        "adminServer": {
          "description": "Configuration for the Administration Server.",
          "$ref": "#/definitions/AdminServer"
        },
        "logHome": {
          "description": "The in-pod name of the directory in which to store the domain, Node Manager, server logs, server  *.out, and optionally HTTP access log files if `httpAccessLogInLogHome` is true. Ignored if logHomeEnabled is false.",
          "type": "string"
        },
        "includeServerOutInPodLog": {
          "description": "If true (the default), then the server .out file will be included in the pod\u0027s stdout.",
          "type": "boolean"
        },
        "clusters": {
          "description": "Configuration for the clusters.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Cluster"
          }
        },
        "serverStartState": {
          "description": "The state in which the server is to be started. Use ADMIN if server should start in the admin state. Defaults to RUNNING.",
          "type": "string",
          "enum": [
            "RUNNING",
            "ADMIN"
          ]
        },
        "image": {
          "description": "The WebLogic Docker image; required when domainHomeSourceType is Image or FromModel; otherwise, defaults to container-registry.oracle.com/middleware/weblogic:12.2.1.4.",
          "type": "string"
        },
        "imagePullPolicy": {
          "description": "The image pull policy for the WebLogic Docker image. Legal values are Always, Never and IfNotPresent. Defaults to Always if image ends in :latest, IfNotPresent otherwise.",
          "type": "string",
          "enum": [
            "Always",
            "Never",
            "IfNotPresent"
          ]
        },
        "replicas": {
          "description": "The number of managed servers to run in any cluster that does not specify a replica count.",
          "type": "number",
          "minimum": 0
        },
        "domainHomeInImage": {
          "deprecated": "true",
          "description": "Deprecated. Use domainHomeSourceType instead. Ignored if domainHomeSourceType is specified. True indicates that the domain home file system is contained in the Docker image specified by the image field. False indicates that the domain home file system is located on a persistent volume.",
          "type": "boolean"
        },
        "serverStartPolicy": {
          "description": "The strategy for deciding whether to start a server. Legal values are ADMIN_ONLY, NEVER, or IF_NEEDED.",
          "type": "string",
          "enum": [
            "NEVER",
            "IF_NEEDED",
            "ADMIN_ONLY"
          ]
        },
        "restartVersion": {
          "description": "If present, every time this value is updated the operator will restart the required servers.",
          "type": "string"
        },
        "introspectVersion": {
          "description": "If present, every time this value is updated, the operator will start introspect domain job",
          "type": "string"
        },
        "dataHome": {
          "description": "An optional, in-pod location for data storage of default and custom file stores. If dataHome is not specified or its value is either not set or empty (e.g. dataHome: \"\") then the data storage directories are determined from the WebLogic domain home configuration.",
          "type": "string"
        },
        "configOverrides": {
          "deprecated": "true",
          "description": "Deprecated. Use configuration.overridesConfigMap instead. Ignored if configuration.overridesConfigMap is specified. The name of the config map for optional WebLogic configuration overrides.",
          "type": "string"
        },
        "logHomeEnabled": {
          "description": "Specified whether the log home folder is enabled. Not required. Defaults to true if domainHomeSourceType is PersistentVolume; false, otherwise.",
          "type": "boolean"
        },
        "serverPod": {
          "description": "Configuration affecting server pods.",
          "$ref": "#/definitions/ServerPod"
        },
        "managedServers": {
          "description": "Configuration for individual Managed Servers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ManagedServer"
          }
        }
      }
    },
    "DomainStatus": {
      "description": "DomainStatus represents information about the status of a domain. Status may trail the actual state of a system.",
      "type": "object",
      "properties": {
        "reason": {
          "description": "A brief CamelCase message indicating details about why the domain is in this state.",
          "type": "string"
        },
        "servers": {
          "description": "Status of WebLogic Servers in this domain.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServerStatus"
          }
        },
        "replicas": {
          "description": "The number of running Managed Servers in the WebLogic cluster if there is only one cluster in the domain and where the cluster does not explicitly configure its replicas in a cluster specification.",
          "type": "number",
          "minimum": 0
        },
        "startTime": {
          "description": "RFC 3339 date and time at which the operator started the domain. This will be when the operator begins processing and will precede when the various servers or clusters are available.",
          "$ref": "#/definitions/DateTime"
        },
        "conditions": {
          "description": "Current service state of domain.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DomainCondition"
          }
        },
        "message": {
          "description": "A human readable message indicating details about why the domain is in this condition.",
          "type": "string"
        },
        "clusters": {
          "description": "Status of WebLogic clusters in this domain.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClusterStatus"
          }
        }
      }
    },
    "Experimental": {
      "type": "object",
      "properties": {
        "istio": {
          "description": "Istio service mesh integration configuration.",
          "$ref": "#/definitions/Istio"
        }
      }
    },
    "Istio": {
      "type": "object",
      "properties": {
        "readinessPort": {
          "description": "The WebLogic readiness port for Istio. Defaults to 8888. Not required.",
          "type": "number"
        },
        "enabled": {
          "description": "True, if this domain is deployed under an Istio service mesh. Defaults to true when the \u0027istio\u0027 element is included. Not required.",
          "type": "boolean"
        }
      }
    },
    "KubernetesResource": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "The annotations to be attached to generated resources.",
          "$ref": "#/definitions/Map"
        },
        "labels": {
          "description": "The labels to be attached to generated resources. The label names must not start with \u0027weblogic.\u0027.",
          "$ref": "#/definitions/Map"
        }
      }
    },
    "ManagedServer": {
      "description": "ManagedServer represents the operator configuration for a single Managed Server.",
      "type": "object",
      "properties": {
        "serverStartState": {
          "description": "The state in which the server is to be started. Use ADMIN if server should start in the admin state. Defaults to RUNNING.",
          "type": "string",
          "enum": [
            "RUNNING",
            "ADMIN"
          ]
        },
        "serverService": {
          "description": "Customization affecting ClusterIP Kubernetes services for WebLogic Server instances.",
          "$ref": "#/definitions/ServerService"
        },
        "serverName": {
          "description": "The name of the Managed Server. Required.",
          "type": "string"
        },
        "serverPod": {
          "description": "Configuration affecting server pods.",
          "$ref": "#/definitions/ServerPod"
        },
        "serverStartPolicy": {
          "description": "The strategy for deciding whether to start a server. Legal values are ALWAYS, NEVER, or IF_NEEDED.",
          "type": "string",
          "enum": [
            "ALWAYS",
            "NEVER",
            "IF_NEEDED"
          ]
        },
        "restartVersion": {
          "description": "If present, every time this value is updated the operator will restart the required servers.",
          "type": "string"
        }
      },
      "required": [
        "serverName"
      ]
    },
    "Map": {
      "type": "object",
      "properties": {}
    },
    "Model": {
      "type": "object",
      "properties": {
        "runtimeEncryptionSecret": {
          "description": "Runtime encryption secret. Required when domainHomeSourceType is set to FromModel.",
          "type": "string"
        },
        "domainType": {
          "description": "WDT domain type: Legal values: WLS, RestrictedJRF, JRF. Defaults to WLS.",
          "type": "string",
          "enum": [
            "WLS",
            "RestrictedJRF",
            "JRF"
          ]
        },
        "configMap": {
          "description": "WDT config map name.",
          "type": "string"
        }
      }
    },
    "Opss": {
      "type": "object",
      "properties": {
        "walletFileSecret": {
          "description": "Secret containing the OPSS key wallet file.",
          "type": "string"
        },
        "walletPasswordSecret": {
          "description": "Secret containing OPSS key passphrase.",
          "type": "string"
        }
      }
    },
    "ProbeTuning": {
      "type": "object",
      "properties": {
        "periodSeconds": {
          "description": "The number of seconds between checks.",
          "type": "number"
        },
        "timeoutSeconds": {
          "description": "The number of seconds with no response that indicates a failure.",
          "type": "number"
        },
        "initialDelaySeconds": {
          "description": "The number of seconds before the first check is performed.",
          "type": "number"
        }
      }
    },
    "ServerHealth": {
      "type": "object",
      "properties": {
        "overallHealth": {
          "description": "Server health of this WebLogic Server. If the value is \"Not available\", the operator has failed to read the health. If the value is \"Not available (possibly overloaded)\", the operator has failed to read the health of the server possibly due to the server is in overloaded state.",
          "type": "string"
        },
        "activationTime": {
          "description": "RFC 3339 date and time at which the server started.",
          "$ref": "#/definitions/DateTime"
        },
        "subsystems": {
          "description": "Status of unhealthy subsystems, if any.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubsystemHealth"
          }
        }
      }
    },
    "ServerPod": {
      "description": "ServerPod describes the configuration for a Kubernetes pod for a server.",
      "type": "object",
      "properties": {
        "nodeName": {
          "description": "NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.",
          "type": "string"
        },
        "livenessProbe": {
          "description": "Settings for the liveness probe associated with a server.",
          "$ref": "#/definitions/ProbeTuning"
        },
        "readinessGates": {
          "description": "If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to \"True\" More info: https://github.com/kubernetes/community/blob/master/keps/sig-network/0007-pod-ready%2B%2B.md",
          "type": "array",
          "items": {
            "$ref": "https://github.com/garethr/kubernetes-json-schema/blob/master/v1.13.5/_definitions.json#/definitions/io.k8s.api.core.v1.PodReadinessGate"
          }
        },
        "serviceAccountName": {
          "description": "Name of the ServiceAccount to be used to run this pod. If it is not set, default ServiceAccount will be used. The ServiceAccount has to exist at the time the pod is created.",
          "type": "string"
        },
        "podSecurityContext": {
          "description": "Pod-level security attributes.",
          "$ref": "https://github.com/garethr/kubernetes-json-schema/blob/master/v1.13.5/_definitions.json#/definitions/io.k8s.api.core.v1.PodSecurityContext"
        },
        "priorityClassName": {
          "description": "If specified, indicates the pod\u0027s priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.",
          "type": "string"
        },
        "volumes": {
          "description": "Additional volumes to be created in the server pod.",
          "type": "array",
          "items": {
            "$ref": "https://github.com/garethr/kubernetes-json-schema/blob/master/v1.13.5/_definitions.json#/definitions/io.k8s.api.core.v1.Volume"
          }
        },
        "resources": {
          "description": "Memory and CPU minimum requirements and limits for the server.",
          "$ref": "https://github.com/garethr/kubernetes-json-schema/blob/master/v1.13.5/_definitions.json#/definitions/io.k8s.api.core.v1.ResourceRequirements"
        },
        "annotations": {
          "description": "The annotations to be attached to generated resources.",
          "$ref": "#/definitions/Map"
        },
        "env": {
          "description": "A list of environment variables to add to a server.",
          "type": "array",
          "items": {
            "$ref": "https://github.com/garethr/kubernetes-json-schema/blob/master/v1.13.5/_definitions.json#/definitions/io.k8s.api.core.v1.EnvVar"
          }
        },
        "restartPolicy": {
          "description": "Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy",
          "type": "string"
        },
        "nodeSelector": {
          "description": "Selector which must match a node\u0027s labels for the pod to be scheduled on that node.",
          "$ref": "#/definitions/Map"
        },
        "volumeMounts": {
          "description": "Additional volume mounts for the server pod.",
          "type": "array",
          "items": {
            "$ref": "https://github.com/garethr/kubernetes-json-schema/blob/master/v1.13.5/_definitions.json#/definitions/io.k8s.api.core.v1.VolumeMount"
          }
        },
        "labels": {
          "description": "The labels to be attached to generated resources. The label names must not start with \u0027weblogic.\u0027.",
          "$ref": "#/definitions/Map"
        },
        "runtimeClassName": {
          "description": "RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://github.com/kubernetes/community/blob/master/keps/sig-node/0014-runtime-class.md This is an alpha feature and may change in the future.",
          "type": "string"
        },
        "tolerations": {
          "description": "If specified, the pod\u0027s tolerations.",
          "type": "array",
          "items": {
            "$ref": "https://github.com/garethr/kubernetes-json-schema/blob/master/v1.13.5/_definitions.json#/definitions/io.k8s.api.core.v1.Toleration"
          }
        },
        "readinessProbe": {
          "description": "Settings for the readiness probe associated with a server.",
          "$ref": "#/definitions/ProbeTuning"
        },
        "containers": {
          "description": "Additional containers to be included in the server pod.",
          "type": "array",
          "items": {
            "$ref": "https://github.com/garethr/kubernetes-json-schema/blob/master/v1.13.5/_definitions.json#/definitions/io.k8s.api.core.v1.Container"
          }
        },
        "containerSecurityContext": {
          "description": "Container-level security attributes. Will override any matching pod-level attributes.",
          "$ref": "https://github.com/garethr/kubernetes-json-schema/blob/master/v1.13.5/_definitions.json#/definitions/io.k8s.api.core.v1.SecurityContext"
        },
        "schedulerName": {
          "description": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
          "type": "string"
        },
        "initContainers": {
          "description": "Initialization containers to be included in the server pod.",
          "type": "array",
          "items": {
            "$ref": "https://github.com/garethr/kubernetes-json-schema/blob/master/v1.13.5/_definitions.json#/definitions/io.k8s.api.core.v1.Container"
          }
        },
        "shutdown": {
          "description": "Configures how the operator should shutdown the server instance.",
          "$ref": "#/definitions/Shutdown"
        },
        "affinity": {
          "description": "If specified, the pod\u0027s scheduling constraints",
          "$ref": "https://github.com/garethr/kubernetes-json-schema/blob/master/v1.13.5/_definitions.json#/definitions/io.k8s.api.core.v1.Affinity"
        }
      }
    },
    "ServerService": {
      "type": "object",
      "properties": {
        "precreateService": {
          "description": "If true, operator will create server services even for server instances without running pods.",
          "type": "boolean"
        },
        "annotations": {
          "description": "The annotations to be attached to generated resources.",
          "$ref": "#/definitions/Map"
        },
        "labels": {
          "description": "The labels to be attached to generated resources. The label names must not start with \u0027weblogic.\u0027.",
          "$ref": "#/definitions/Map"
        }
      }
    },
    "ServerStatus": {
      "type": "object",
      "properties": {
        "nodeName": {
          "description": "Name of node that is hosting the Pod containing this WebLogic Server.",
          "type": "string"
        },
        "desiredState": {
          "description": "Desired state of this WebLogic Server.",
          "type": "string"
        },
        "clusterName": {
          "description": "WebLogic cluster name, if the server is part of a cluster.",
          "type": "string"
        },
        "serverName": {
          "description": "WebLogic Server name. Required.",
          "type": "string"
        },
        "health": {
          "description": "Current status and health of a specific WebLogic Server.",
          "$ref": "#/definitions/ServerHealth"
        },
        "state": {
          "description": "Current state of this WebLogic Server. Required.",
          "type": "string"
        }
      }
    },
    "Shutdown": {
      "description": "Shutdown describes the configuration for shutting down a server instance.",
      "type": "object",
      "properties": {
        "ignoreSessions": {
          "description": "For graceful shutdown only, indicates to ignore pending HTTP sessions during in-flight work handling. Not required. Defaults to false.",
          "type": "boolean"
        },
        "shutdownType": {
          "description": "Tells the operator how to shutdown server instances. Not required. Defaults to graceful shutdown.",
          "type": "string",
          "enum": [
            "Graceful",
            "Forced"
          ]
        },
        "timeoutSeconds": {
          "description": "For graceful shutdown only, number of seconds to wait before aborting in-flight work and shutting down the server. Not required. Defaults to 30 seconds.",
          "type": "number"
        }
      }
    },
    "SubsystemHealth": {
      "type": "object",
      "properties": {
        "symptoms": {
          "description": "Symptoms provided by the reporting subsystem.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "health": {
          "description": "Server health of this WebLogic Server. Required.",
          "type": "string"
        },
        "subsystemName": {
          "description": "Name of subsystem providing symptom information. Required.",
          "type": "string"
        }
      }
    }
  },
  "properties": {
    "metadata": {
      "description": "The domain meta-data. Must include the name and namespace.",
      "$ref": "https://github.com/garethr/kubernetes-json-schema/blob/master/v1.13.5/_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "apiVersion": {
      "description": "The API version for the Domain.",
      "type": "string"
    },
    "kind": {
      "description": "The type of resource. Must be \u0027Domain\u0027.",
      "type": "string"
    },
    "spec": {
      "description": "The specification of the domain. Required.",
      "$ref": "#/definitions/DomainSpec"
    },
    "status": {
      "description": "The current status of the domain. Updated by the operator.",
      "$ref": "#/definitions/DomainStatus"
    }
  },
  "required": [
    "metadata",
    "spec"
  ]
}