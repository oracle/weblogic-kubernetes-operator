# Copyright (c) 2020, Oracle Corporation and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  annotations:
    kubernetes.io/ingress.class: traefik
  name: @domain1uid@-http-ingress-rule
  namespace: @NS@
spec:
  entryPoints:
   - web
  routes:
  - kind: Rule
    match: Host(`@domain1uid@.@NS@.cluster-1.test`)
    services:
    - kind: Service
      name: @domain1uid@-cluster-cluster-1
      port: 8001
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  annotations:
    kubernetes.io/ingress.class: traefik
  name: @domain1uid@-https-ingress-rule
  namespace: @NS@
spec:
  entryPoints:
   - websecure
  routes:
  - kind: Rule
    match: Host(`@domain1uid@.@NS@.cluster-1.test`)
    services:
    - kind: Service
      name: @domain1uid@-cluster-cluster-1
      port: 8001
  tls:
     secretName: @domain1uid@-traefik-tls-secret
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  annotations:
    kubernetes.io/ingress.class: traefik
  name: @domain2uid@-http-ingress-rule
  namespace: @NS@
spec:
  entryPoints:
   - web
  routes:
  - kind: Rule
    match: Host(`@domain2uid@.@NS@.cluster-1.test`)
    services:
    - kind: Service
      name: @domain2uid@-cluster-cluster-1
      port: 8001
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  annotations:
    kubernetes.io/ingress.class: traefik
  name: @domain2uid@-https-ingress-rule
  namespace: @NS@
spec:
  entryPoints:
   - websecure
  routes:
  - kind: Rule
    match: Host(`@domain2uid@.@NS@.cluster-1.test`)
    services:
    - kind: Service
      name: @domain2uid@-cluster-cluster-1
      port: 8001
  tls:
     secretName: @domain2uid@-tls-secret
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  annotations:
    kubernetes.io/ingress.class: traefik
  name: @domain1uid@-admin-http-ingress-rule
  namespace: @NS@
spec:
  entryPoints:
   - web
  routes:
  - kind: Rule
    match: Host(`@domain1uid@.@NS@.admin-server.test`)
    services:
    - kind: Service
      name: @domain1uid@-admin-server
      port: 7001
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  annotations:
    kubernetes.io/ingress.class: traefik
  name: @domain2uid@-admin-http-ingress-rule
  namespace: @NS@
spec:
  entryPoints:
   - web
  routes:
  - kind: Rule
    match: Host(`@domain2uid@.@NS@.admin-server.test`)
    services:
    - kind: Service
      name: @domain2uid@-admin-server
      port: 7001
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  annotations:
    kubernetes.io/ingress.class: traefik
  name: @domain1uid@-traefik-pathrouting
  namespace: @NS@
spec:
  routes:
  - kind: Rule
    match: PathPrefix(`/domain1`)
    middlewares:
    - name: middleware-domain1
      namespace: @NS@
    services:
    - kind: Service
      name: @domain1uid@-cluster-cluster-1
      port: 8001
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: middleware-domain1
  namespace: @NS@
spec:
  replacePathRegex:
    regex: ^/domain1(.*)
    replacement: /$1
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  annotations:
    kubernetes.io/ingress.class: traefik
  name: @domain2uid@-traefik-pathrouting
  namespace: @NS@
spec:
  routes:
  - kind: Rule
    match: PathPrefix(`/domain2`)
    middlewares:
    - name: middleware-domain2
      namespace: @NS@
    services:
    - kind: Service
      name: @domain2uid@-cluster-cluster-1
      port: 8001
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: middleware-domain2
  namespace: @NS@
spec:
  replacePathRegex:
    regex: ^/domain2(.*)
    replacement: /$1
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  annotations:
    kubernetes.io/ingress.class: traefik
  name: @domain1uid@-traefik-tls-console
  namespace: default
spec:
  entryPoints:
  - websecure
  routes:
  - kind: Rule
    match: PathPrefix(`/console`)
    middlewares:
    - name: tls-middleware-console1
      namespace: default
    services:
    - kind: Service
      name: @domain1uid@-admin-server
      namespace: default
      port: 7001
  tls:
    secretName: @domain1uid@-traefik-tls-secret
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: tls-middleware-console1
  namespace: default
spec:
  headers:
    customRequestHeaders:
      X-Custom-Request-Header: "" # Removes
      X-Forwarded-For: "" # Removes
      WL-Proxy-Client-IP: "" # Removes
      WL-Proxy-SSL: "" # Removes
      WL-Proxy-SSL: "true" # Adds
    sslRedirect: true
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  annotations:
    kubernetes.io/ingress.class: traefik
    ingress.kubernetes.io/custom-request-headers: "WL-Proxy-SSL: true"
  name: @domain1uid@-traefik-tls-pathrouting
  namespace: default
spec:
  entryPoints:
  - websecure
  routes:
  - kind: Rule
    match: PathPrefix(`/domain1`)
    middlewares:
    - name: tls-middleware-domain1
      namespace: default
    services:
    - kind: Service
      name: @domain1uid@-cluster-cluster-1
      namespace: default
      port: 8001
  tls:
    secretName: @domain1uid@-traefik-tls-secret
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: tls-middleware-domain1
  namespace: default
spec:
  replacePathRegex:
    regex: ^/domain1(.*)
    replacement: /$1
  sslRedirect: true
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  annotations:
    kubernetes.io/ingress.class: traefik
    ingress.kubernetes.io/custom-request-headers: "WL-Proxy-SSL: true"
  name: @domain2uid@-traefik-tls-pathrouting
  namespace: default
spec:
  entryPoints:
  - websecure
  routes:
  - kind: Rule
    match: PathPrefix(`/domain2`)
    middlewares:
    - name: tls-middleware-domain2
      namespace: default
    services:
    - kind: Service
      name: @domain2uid@-cluster-cluster-1
      namespace: default
      port: 8001
  tls:
    secretName: @domain2uid@-traefik-tls-secret
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: tls-middleware-domain2
  namespace: default
spec:
  replacePathRegex:
    regex: ^/domain2(.*)
    replacement: /$1
  sslRedirect: true