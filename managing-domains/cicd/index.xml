<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CI/CD considerations on WebLogic Kubernetes Operator</title>
    <link>https://oracle.github.io/weblogic-kubernetes-operator/managing-domains/cicd/</link>
    <description>Recent content in CI/CD considerations on WebLogic Kubernetes Operator</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 11 Apr 2019 13:50:15 -0400</lastBuildDate>
    <atom:link href="https://oracle.github.io/weblogic-kubernetes-operator/managing-domains/cicd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Container image layering</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/managing-domains/cicd/layering/</link>
      <pubDate>Thu, 11 Apr 2019 13:15:32 -0400</pubDate>
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/managing-domains/cicd/layering/</guid>
      <description>Container images are composed of layers, as shown in the following diagram. If you download the standard weblogic:12.2.1.4 image from the Oracle Container Registry, then you can see these layers using the command docker inspect container-registry.oracle.com/middleware/weblogic:14.1.2.0-generic-jdk17-ol8 (the domain layer will not be there). You are not required to use layers, but efficient use of layers is considered a best practice.&#xA;Why is it important to maintain the layering of images? Layering is an important technique in container images.</description>
    </item>
    <item>
      <title>Why layering matters</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/managing-domains/cicd/why-layering-matters/</link>
      <pubDate>Thu, 11 Apr 2019 13:27:58 -0400</pubDate>
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/managing-domains/cicd/why-layering-matters/</guid>
      <description>How does layering affect our CI/CD process? Now that we know more about layering, letâ€™s talk about why it is important to our CI/CD process. Let&amp;rsquo;s consider the kinds of updates we might want to make to our domain:&#xA;You might want to update the domain by:&#xA;Installing a patch on the operating system or a library. Updating the version of the JDK you are using. Picking up a new version of WebLogic Server.</description>
    </item>
    <item>
      <title>Choose an approach</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/managing-domains/cicd/choose-an-approach/</link>
      <pubDate>Thu, 11 Apr 2019 13:36:57 -0400</pubDate>
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/managing-domains/cicd/choose-an-approach/</guid>
      <description>Let&amp;rsquo;s review what we have discussed and talk about when we might want to use various approaches. We can start by asking ourselves questions like these:&#xA;Can you make the desired change with a configuration override or Model in Image ConfigMap?&#xA;When your domain home source type is Domain on PV or Domain in Image, the operator allows you to inject a number of configuration overrides into your pods before starting any servers in the domain.</description>
    </item>
    <item>
      <title>Mutate the domain layer</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/managing-domains/cicd/mutate-the-domain-layer/</link>
      <pubDate>Thu, 11 Apr 2019 13:43:41 -0400</pubDate>
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/managing-domains/cicd/mutate-the-domain-layer/</guid>
      <description>If you need to mutate the domain layer, and keep the same domain encryption keys, then there are some choices about how to implement that, as alluded to previously. Let&amp;rsquo;s explore those in some more detail now.&#xA;The first option is to implement each mutation as a delta to the previous state. This is conceptually similar to how immutable objects (like Java Strings) are implemented, a &amp;ldquo;copy on write&amp;rdquo; approach applied to the domain configuration as a unit.</description>
    </item>
    <item>
      <title>Copy domains</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/managing-domains/cicd/how-to-copy-domains/</link>
      <pubDate>Thu, 11 Apr 2019 13:48:15 -0400</pubDate>
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/managing-domains/cicd/how-to-copy-domains/</guid>
      <description>The recommended approach to save a copy of a Domain in Image or Domain on PV domain is to simply ZIP (or tar) the domain directory. However, there is a very important caveat with this recommendation - when you unzip the domain, it must go back into exactly the same location (Domain Home) in the (new) file system. Using this approach will maintain the same domain encryption key.&#xA;The best practice/recommended approach is to create a &amp;ldquo;primordial domain&amp;rdquo; which does not contain any applications or resources, and to create a ZIP file of this domain before starting any servers.</description>
    </item>
    <item>
      <title>Tools</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/managing-domains/cicd/tools/</link>
      <pubDate>Thu, 11 Apr 2019 13:50:15 -0400</pubDate>
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/managing-domains/cicd/tools/</guid>
      <description>WebLogic Deploy Tooling (WDT) You can use several of the WDT tools in a CI/CD pipeline. For example, the createDomain tool creates a new domain based on a simple model, and updateDomain (and deployApps) uses the same model concept to update an existing domain (preserving the same domain encryption key). The deployApps tool is very similar to the updateDomain tool, but limits what can be updated to application-related configuration attributes such as data sources and application archives.</description>
    </item>
  </channel>
</rss>
