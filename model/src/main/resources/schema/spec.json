{
  "type": "object",
  "javaType": "oracle.kubernetes.weblogic.domain.v1.DomainSpec",
  "description": "DomainSpec is a description of a domain.",
  "required": [
    "domainUID",
    "domainName",
    "adminSecret",
    "asName",
    "asPort"
  ],
  "properties": {
    "domainUID": {
      "description": "Domain unique identifier.  Must be unique across the Kubernetes cluster.",
      "type": "string"
    },
    "domainName": {
      "description": "Domain name",
      "type": "string"
    },
    "image": {
      "description": "WebLogic Docker image.  Defaults to store/oracle/weblogic:12.2.1.3",
      "type": "string"
    },
    "imagePullPolicy": {
      "description": "The image pull policy for the WebLogic Docker image. Legal values are Always, Never and IfNotPresent. <p>Defaults to Always if image ends in :latest, IfNotPresent otherwise. <p>More info: https://kubernetes.io/docs/concepts/containers/images#updating-images.",
      "type": "string"
    },
    "imagePullSecret": {
      "description": "Reference to the secret used to authenticate a request for an image pull",
      "javaType": "io.kubernetes.client.models.V1LocalObjectReference",
      "type": "object"
    },
    "adminSecret": {
      "description": "Reference to secret containing domain administrator username and password.  Secret must contain keys names 'username' and 'password'",
      "javaType": "io.kubernetes.client.models.V1SecretReference",
      "type": "object"
    },
    "asName": {
      "description": "Admin server name.  Note: Possibly temporary as we could find this value through domain home inspection.",
      "type": "string"
    },
    "asPort": {
      "description": "Administration server port.  Note: Possibly temporary as we could find this value through domain home inspection.",
      "type": "integer"
    },
    "exportT3Channels": {
      "description": "List of specific T3 channels to export.  Named T3 Channels will be exposed using NodePort Services.  The internal and external ports must match; therefore, it is required that the channel's port in the WebLogic configuration be a legal and unique value in the Kubernetes cluster's legal NodePort port range.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "startupControl": {
      "description": "Controls which managed servers will be started. Legal values are NONE, ADMIN, ALL, SPECIFIED and AUTO. <ul><li>NONE indicates that no servers, including the administration server, will be started. <li>ADMIN indicates that only the administration server will be started. <li>ALL indicates that all servers in the domain will be started. <li>SPECIFIED indicates that the administration server will be started and then additionally only those servers listed under serverStartup or managed servers belonging to cluster listed under clusterStartup up to the cluster's replicas field will be started. <li>AUTO indicates that servers will be started exactly as with SPECIFIED, but then managed servers belonging to clusters not listed under clusterStartup will be started up to the replicas field.</ul> <p>Defaults to AUTO.",
      "type": "string"
    },
    "serverStartup": {
      "description": "List of server startup details for selected servers.",
      "type": "array",
      "items": {
        "$ref": "serverstartup.json"
      }
    },
    "clusterStartup": {
      "description": "List of server startup details for selected clusters.",
      "type": "array",
      "items": {
        "$ref": "clusterstartup.json"
      }
    },
    "replicas": {
      "description": "The desired number of running managed servers in each WebLogic cluster that is not explicitly configured in clusterStartup.",
      "type": "integer",
      "format": "int32"
    },
     "logHome": {
      "description": "The in-pod name of the directory to store the domain, node manager, server logs, and server .out files in",
      "type": "string",
     },
     "includeServerOutInPodLog": {
      "description": "Whether to include the server .out file to the pod's stdout",
      "type": "string",
    },
    "storage": {
      "predefined": {
        "description": "A definition of domain storage that is externally defined.",
        "claim": {
          "description": "The name of the persistent volume claim used to store logs and PV-based WLS domains.",
          "type": "string"
        }
      },
      "generated": {
        "description": "A definition of domain storage to be defined by the operator.",
        "storageSize": {
          "description": "The size of the storage to allocate for the domain. Will be a Kubernetes quantity.",
          "type": "string"
        },
        "reclaimPolicy": {
          "description": "One of: 'Retain' or 'Delete'; determines what to do with the volume after its claim is release.",
          "type": "string"
        },
        "hostPath": {
          "description": "A definition of domain storage to be defined on the local node.",
          "path": {
            "description": "The path to the storage.",
            "type": "string"
          }
        },
        "nfs": {
          "description": "A definition of domain storage to be defined by the operator using remote storage.",
          "server": {
            "description": "The server to host the memory.",
            "type": "string"
          },
          "path": {
            "description": "The path to the storage.",
            "type": "string"
          }
        }
      }
    }
  }
}
