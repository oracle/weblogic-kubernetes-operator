// Copyright (c) 2021, Oracle and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

package oracle.kubernetes.operator.helpers;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import io.kubernetes.client.openapi.models.EventsV1Event;
import io.kubernetes.client.openapi.models.V1ObjectReference;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;

/** Kubernetes event objects that are generated by the operator and associated with a namespace resource or
 * a domain resource. */
public class KubernetesEventObjects {
  private final Map<EventIdentifier, EventsV1Event> events = new ConcurrentHashMap<>();

  public int size() {
    return events.size();
  }

  public void remove(EventsV1Event event) {
    events.remove(new EventIdentifier(event));
  }

  public void update(EventsV1Event event) {
    events.put(new EventIdentifier(event), event);
  }

  public EventsV1Event getExistingEvent(EventsV1Event event) {
    return events.get(new EventIdentifier(event));
  }

  private static class EventIdentifier {
    V1ObjectReference regarding;
    String reason;
    String note;

    EventIdentifier(EventsV1Event event) {
      this.regarding = event.getRegarding();
      this.reason = event.getReason();
      this.note = event.getNote();
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }

      if (o == null || getClass() != o.getClass()) {
        return false;
      }

      EventIdentifier that = (EventIdentifier) o;

      return new EqualsBuilder()
          .append(regarding, that.regarding)
          .append(reason, that.reason)
          .append(note, that.note)
          .isEquals();
    }

    @Override
    public int hashCode() {
      return new HashCodeBuilder(17, 37)
          .append(regarding)
          .append(reason)
          .append(note)
          .toHashCode();
    }
  }
}
