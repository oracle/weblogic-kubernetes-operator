<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Model in image on WebLogic Kubernetes Operator</title>
    <link>https://oracle.github.io/weblogic-kubernetes-operator/samples/domains/model-in-image/</link>
    <description>Recent content in Model in image on WebLogic Kubernetes Operator</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 23 Feb 2019 17:32:31 -0500</lastBuildDate>
    <atom:link href="https://oracle.github.io/weblogic-kubernetes-operator/samples/domains/model-in-image/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Prerequisites</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/samples/domains/model-in-image/prerequisites/</link>
      <pubDate>Sat, 23 Feb 2019 17:32:31 -0500</pubDate>
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/samples/domains/model-in-image/prerequisites/</guid>
      <description>Prerequisites The JAVA_HOME environment variable must be set and must reference a valid JDK 8 or 11 installation.&#xA;Get the operator source and put it in /tmp/weblogic-kubernetes-operator.&#xA;For example:&#xA;$ cd /tmp $ git clone --branch v4.2.17 https://github.com/oracle/weblogic-kubernetes-operator.git NOTE: We will refer to the top directory of the operator source tree as /tmp/weblogic-kubernetes-operator; however, you can use a different location.&#xA;For additional information about obtaining the operator source, see the Developer Guide Requirements.</description>
    </item>
    <item>
      <title>Auxiliary image creation</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/samples/domains/model-in-image/auxiliary-image-creation/</link>
      <pubDate>Sat, 23 Feb 2019 17:32:31 -0500</pubDate>
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/samples/domains/model-in-image/auxiliary-image-creation/</guid>
      <description>Contents Overview Auxiliary image creation Understand your first archive Stage a ZIP file of the archive Stage model files Create the image with WIT Before you begin: Complete the steps in Prerequisites.&#xA;Overview Auxiliary image creation step uses the WebLogic Image Tool to create a Model in Image auxiliary image. This image contains:&#xA;The directory where the WebLogic Deploy Tooling software is installed (also known as WDT Home), expected in an image&amp;rsquo;s /auxiliary/weblogic-deploy directory, by default.</description>
    </item>
    <item>
      <title>Initial use case</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/samples/domains/model-in-image/initial/</link>
      <pubDate>Sat, 23 Feb 2019 17:32:31 -0500</pubDate>
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/samples/domains/model-in-image/initial/</guid>
      <description>Contents Overview Auxiliary image Deploy resources - Introduction Secrets Domain resource Verify the domain Verify the pods Invoke the web application Before you begin: Perform the steps in Prerequisites and then create a Model in Image auxiliary image by completing the steps in Auxiliary image creation.&#xA;Overview In this use case, you set up an initial WebLogic domain. This involves:&#xA;Using the auxiliary image that you previously created. Creating secrets for the domain.</description>
    </item>
    <item>
      <title>Update 1</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/samples/domains/model-in-image/update1/</link>
      <pubDate>Sat, 23 Feb 2019 17:32:31 -0500</pubDate>
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/samples/domains/model-in-image/update1/</guid>
      <description>This use case demonstrates dynamically adding a data source to your running domain by updating your model and rolling your domain. It demonstrates several features of WDT and Model in Image:&#xA;The syntax used for updating a model is the same syntax you use for creating the original model. A domain&amp;rsquo;s model can be updated dynamically by supplying a model update in a file in a Kubernetes ConfigMap. Model updates can be as simple as changing the value of a single attribute, or more complex, such as adding a JMS Server.</description>
    </item>
    <item>
      <title>Update 2</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/samples/domains/model-in-image/update2/</link>
      <pubDate>Sat, 23 Feb 2019 17:32:31 -0500</pubDate>
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/samples/domains/model-in-image/update2/</guid>
      <description>This use case demonstrates concurrently deploying a domain that is similar to the Update 1 use case domain to the same sample-domain1-ns namespace, but with a different domain UID, a different WebLogic domain name, and a different WebLogic domain encryption key. It does this by:&#xA;Using the same image, image model YAML file, and application archive as the Initial and Update 1 use cases. Using the same model update ConfigMap source file as the Update 1 use case (a data source).</description>
    </item>
    <item>
      <title>Update 3</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/samples/domains/model-in-image/update3/</link>
      <pubDate>Sat, 23 Feb 2019 17:32:31 -0500</pubDate>
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/samples/domains/model-in-image/update3/</guid>
      <description>The Update 3 use case demonstrates deploying an updated WebLogic application to the running Update 1 use case domain using an updated image.&#xA;In the use case, you will:&#xA;Create an image model-in-image:WLS-v2 that is similar to the currently active model-in-image:WLS-v1 image, but with the following updates: An updated web application v2 at the myapp-v2 directory path within the WDT application archive instead of myapp-v1. An updated model YAML file within the image that points to the new web application path.</description>
    </item>
    <item>
      <title>Update 4</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/samples/domains/model-in-image/update4/</link>
      <pubDate>Sat, 23 Feb 2019 17:32:31 -0500</pubDate>
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/samples/domains/model-in-image/update4/</guid>
      <description>This use case demonstrates dynamically changing the Work Manager threads constraint and data source configuration in your running domain without restarting (rolling) running WebLogic Servers. This use case requires that the Update 1 use case has been run and expects that its sample-domain1 domain is deployed and running.&#xA;In the use case, you will:&#xA;Update the ConfigMap containing the WDT model created in the Update 1 use case with changes to the Work Manager threads constraint configuration.</description>
    </item>
    <item>
      <title>Cleanup</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/samples/domains/model-in-image/cleanup/</link>
      <pubDate>Sat, 23 Feb 2019 17:32:31 -0500</pubDate>
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/samples/domains/model-in-image/cleanup/</guid>
      <description>To remove the resources you have created in these samples:&#xA;Delete the resources associated with the domain.&#xA;$ /tmp/weblogic-kubernetes-operator/kubernetes/samples/scripts/delete-domain/delete-weblogic-domain-resources.sh -d sample-domain1 $ /tmp/weblogic-kubernetes-operator/kubernetes/samples/scripts/delete-domain/delete-weblogic-domain-resources.sh -d sample-domain2 This deletes the domain and any related resources that are labeled with the domain UID sample-domain1 and sample-domain2.&#xA;It leaves the namespace intact, the operator running, the load balancer running (if installed), and the database running (if installed).&#xA;NOTE: When you delete a domain, the operator will detect your domain deletion and shut down its pods.</description>
    </item>
  </channel>
</rss>
