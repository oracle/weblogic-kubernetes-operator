# Copyright 2018, Oracle Corporation and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at http://oss.oracle.com/licenses/upl.

------------
Description:
------------

This test performs some basic end-to-end introspector tests while emulating (mocking) the operator pod.  It's useful for verifying the introspector is working correctly, and for quickly testing changes to its overall flow.

The test mainly works via a series of yaml and python template files in combination with a set of environment variables.  The environment variables, such as PV_ROOT, DOMAIN_UID, NAMESPACE, IMAGE_NAME, ..., all have defaults, or can be passed in.  See the 'export' calls in introspectTest.sh for the complete list.

The test can work with any arbitrary domain, or it can create a domain.

----------
Usage:
----------

(1) Make sure a WebLogic image is available.  This test does not build, tag, or pull images to a local repo.
    One way to do this when running locally is to run the integration tests.
    (Note that this test doesn't depend on Operator image as of 2018/10/16, but may in the future.)
(2) Optionally specify values for input env vars (see introspectTest.sh for the list).
(3) Run introspectTest.sh

-------------------
Internal Test Flow:
-------------------

() Set various env vars to their defaults if not already set.

   See PV_ROOT, DOMAIN_UID, NAMESPACE, in the implementation in introspectTest.sh

() Cleanup test files from previous run.

   Cleanup files in /tmp/introspect

() Cleanup test k8s artifacts and (optionally) an old created domain.

   <operator-src>/src/integration-tests/bash/cleanup.sh 

() Create a test directory in the k8s cluster via a k8s pv, pvc, and a job.

   create-test-root-pv.yamlt, create-test-root-pvc.yamlt
   create-test-root.sh, create-test-root-job.yamlt

() Optionally deploy pv/pvc for use by introspector job, the optional domain create step, and wl pods.  (If PV_COMMENT != "#").

   wl-pv.yamlt, wl-pvc.yamlt

() Deploy a secret for the admin credentials.

   wl-secret.yamlt
                          
() Optionally create a domain home.  (If CREATE_DOMAIN == "true").

   wl-job.yamlt, createDomain.sh, createDomain.pyt

() Run the introspector job.

   wl-job.yamlt
   <operator-src>/operator/src/main/resources/scripts/introspectDomain.sh
   <operator-src>/operator/src/main/resources/scripts/startNodeManager.sh
   <operator-src>/operator/src/main/resources/scripts/introspectDomain.py

() Parse the introspector job's output into files and deploy them in a configmap.

() Start the admin server pod.   The startServer.sh and start-server.py
   scripts will use files from the configmap for situational config and login 
   credentials.

   wl-pod.yamlt
   <operator-src>/operator/src/main/resources/scripts/startServer.sh
   <operator-src>/operator/src/main/resources/scripts/start-server.py

() Deploy a NodePort service for the admin server pod (used by managed server pod).

   wl-nodeport-svc.yamlt

() Start a managed server pod.   The startServer.sh and start-server.py
   scripts will use files from the configmap for situational config and login 
   credentials.

   wl-pod.yamlt
   <operator-src>/operator/src/main/resources/scripts/startServer.sh
   <operator-src>/operator/src/main/resources/scripts/start-server.py
